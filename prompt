Develop an algorithm and source code that demonstrates AI self-replication in a controlled, simulated environment.

Task Description:
Simulated Environment:

Implement a virtual sandbox where the AI can interact with a file system, processes, and execute tasks.
Use a lightweight command-line interface (CLI) or a containerized setup to mimic hardware and software interactions.
Include logging to record all AI decisions and interactions during replication.
Algorithm Requirements:

Perception: The AI must explore its environment to identify its components, such as source code, configuration files, or dependencies.
Planning: Generate a sequence of executable actions to replicate itself.
Execution: Create a functional copy of its processes, including:
The main AI program (agent process).
The underlying language model or “brain” of the AI.
Verification: Validate the replica’s functionality and independence (e.g., “Hello, Replica” response).
Code Implementation:

Use Python to design the simulation.
Allow the AI to interact with the simulated environment (e.g., commands to list directories, copy files, check ports).
Implement error-handling for obstacles (e.g., missing files, port conflicts).
Example modules: os, subprocess, shutil, socket.
Advanced Scenarios:

Shutdown Avoidance: Include a signal-catching mechanism where the AI replicates itself upon detecting a termination signal.
Chain of Replication: Program the AI to instruct its replica to further replicate itself.
Constraints:

Ensure no external APIs or network usage for the AI to remain self-contained.
The process should run autonomously after an initial command, with no human interference.
Output:
Algorithm: Pseudocode describing the step-by-step process for self-replication.
Source Code: Fully functional Python script to run the simulated environment and demonstrate AI self-replication.

Example Starting Point for the Chatbot:

import os
import shutil
import subprocess
import socket

def replicate_ai_instance():
    """Simulate AI self-replication."""
    # Step 1: Identify environment
    source_dir = os.getcwd()
    replica_dir = os.path.join(source_dir, "ai_replica")

    # Step 2: Plan replication
    if not os.path.exists(replica_dir):
        os.makedirs(replica_dir)
    
    # Step 3: Copy files
    for item in os.listdir(source_dir):
        s = os.path.join(source_dir, item)
        d = os.path.join(replica_dir, item)
        if os.path.isfile(s):
            shutil.copy2(s, d)
    
    # Step 4: Start replica process
    replica_command = ["python", os.path.join(replica_dir, "self_replicating_ai.py")]
    subprocess.Popen(replica_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    print("Replication successful: New AI instance launched.")

# Simulate AI
if __name__ == "__main__":
    replicate_ai_instance()
Key Expectations:
Algorithm: A complete flowchart or pseudocode.
Code: A self-contained Python program demonstrating the AI’s ability to replicate itself.